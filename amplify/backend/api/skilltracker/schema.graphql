type Group @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  description: String
  users: [User] @manyToMany(relationName: "GroupUser")
}

type CertificationLevel @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  description: String
  score: Int
  certifications: [Certification]
    @hasMany(indexName: "byCertificationLevel", fields: ["id"])
}

type User
  @model
  @auth(rules: [{ allow: owner, operations: [create, delete, update], identityClaim: "sub" }, { allow: private, provider: iam}]) {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  image: String
  certifications: [Certification] @manyToMany(relationName: "UserCertification")
  groups: [Group] @manyToMany(relationName: "GroupUser")
}

type Certification @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  shortName: String!
  description: String
  image: String
  providerID: ID! @index(name: "byProvider")
  provider: Provider @belongsTo(fields: ["providerID"])
  certificationlevelID: ID! @index(name: "byCertificationLevel")
  certificationLevel: CertificationLevel @belongsTo(fields: ["providerID"])
  users: [User] @manyToMany(relationName: "UserCertification")
}

type Provider @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  shortName: String!
  description: String
  image: String
  certifications: [Certification]
    @hasMany(indexName: "byProvider", fields: ["id"])
}
