type Certification @model @auth(rules: [{allow: private, operations: [read]}, {allow: groups, groups: ["admins"]}]) {
  id: ID!
  name: String!
  shortName: String!
  description: String
  image: String
  providerID: ID! @index(name: "byProvider")
  provider: Provider @belongsTo(fields: ["providerID"])
  certificationlevelID: ID! @index(name: "byCertificationLevel")
  certificationLevel: CertificationLevel @belongsTo(fields: ["certificationlevelID"])
  users: [UserCertification] @hasMany(indexName: "byCertification", fields: ["id"])
}

type CertificationLevel @model @auth(rules: [{allow: private, operations: [read]}, {allow: groups, groups: ["admins"]}]) {
  id: ID!
  name: String!
  description: String
  score: Int
  certifications: [Certification] @hasMany(indexName: "byCertificationLevel", fields: ["id"])
}

type Provider @model @auth(rules: [{allow: private, operations: [read]}, {allow: groups, groups: ["admins"]}]) {
  id: ID!
  name: String!
  shortName: String!
  description: String
  image: String
  certifications: [Certification] @hasMany(indexName: "byProvider", fields: ["id"])
  skills: [Skill] @hasMany(indexName: "byProvider", fields: ["id"])
}

type Skill @model @auth(rules: [{allow: private, operations: [read]}, {allow: groups, groups: ["admins"]}]) {
  id: ID!
  name: String!
  description: String
  image: String
  providerId: ID! @index(name: "byProvider")
  provider: Provider @belongsTo(fields: ["providerId"])
  level: SkillLevel! @default(value: "l1")
}

enum SkillLevel {
  l1
  l2
  l3
}

type Team @model @auth(rules: [{allow: private, operations: [read, create]}, {allow: groups, groups: ["admins"]}]) {
  id: ID!
  name: String!
  description: String
  color: String
  users: [UserTeam] @hasMany(indexName: "byTeam", fields: ["id"])
}

type User @model @auth(rules: [{allow: private, operations: [read]},{allow: owner, operations: [read, update]}, {allow: groups, groups: ["admins"]}]) {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  image: String
  certifications: [UserCertification] @hasMany(indexName: "byUser", fields: ["id"])
  teams: [UserTeam] @hasMany(indexName: "byUser", fields: ["id"])
  color: String
  state: String
  title: String
}

type UserCertification @model @auth(rules: [{allow: private, operations: [create, read]}, {allow: owner}, {allow: groups, groups: ["admins"]}]) {
  id: ID!
  userId: ID! @index(name: "byUser")
  certificationId: ID! @index(name: "byCertification")
  user: User! @belongsTo(fields: ["userId"])
  certification: Certification! @belongsTo(fields: ["certificationId"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  earnedAt: AWSDate
  expiredAt: AWSDate
  owner: String
}

type UserTeam @model @auth(rules: [{allow: private, operations: [create, read]}, {allow: owner}, {allow: groups, groups: ["admins"]}]) {
  id: ID!
  userId: ID! @index(name: "byUser")
  teamId: ID! @index(name: "byTeam")
  user: User! @belongsTo(fields: ["userId"])
  team: Team! @belongsTo(fields: ["teamId"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}
